import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt
#loading the fashion mnist dataset
fmnist = tf.keras.datasets.fashion_mnist
#the function load data will give two tuples containing two lists each. the training and testing values for graphics containing items and labels
#Load the dataset
(training_images, training_labels), (test_images, test_labels) = fmnist.load_data()

#To visualize an image in array and pixels we do the following
#set the index
index = 0
#set number of characters per row when printing
np.set_printoptions(linewidth=320)
#Print the labels and the image 
print(f'Label: {training_labels[index]}')
print(f'Image in Array form: {training_images[index]}')
#visualize the image
plt.imshow(training_images[index])

#We normalise the pixel values between 0 and 1 since training is better then
training_images= training_images/ 255.0
test_images = test_images/255.0
#Now we build the classification model
model = tf.keras.models.Sequential([tf.keras.layers.FLatten(),
                                    tf.keras.layers.Dense(128, activation= tf.nn.relu),
                                    tf.keras.layers.Dense(10, activation= tf.nn.softmax)])
                                    
#Now we build the model by combining it with an optimizer and loss function and then fit
model.compile(optimizer = tf.optimizers.Adam(),
              loss = 'sparse_categorical_crossentropy',
              metrics=['accuracy'])
#now fitting
model.fit(training_images, training_labels, epochs=5)

#now we will evaluate over test data
model.evaluate(test_images, test_labels)
